//Folding To The Moon:
https://www.codewars.com/kata/58f0ba42e89aa6158400000e


//Problem
Have you heard about the myth that if you fold a paper enough times, you can reach the moon with it? Sure you do, but exactly how many? Maybe it's time to write a program to figure it out.

You know that a piece of paper has a thickness of 0.0001m. Given distance in units of meters, calculate how many times you have to fold the paper to make the paper reach this distance.
(If you're not familiar with the concept of folding a paper: Each fold doubles its total thickness.)

Note: Of course you can't do half a fold. You should know what this means ;P

Also, if somebody is giving you a non-positive distance, it's clearly bogus and you should yell at them by returning null (or whatever equivalent in your language).


//My Solution
def fold_to(distance)
  if distance < 0
    return nil
  elsif distance < 0.0001
    return 0
  else
    return Math.log2(10000 * distance).ceil
  end
end


//Working
Once I'd coded for the fringe cases of negative distances and no folds required, the majority of this problem involced recalling some old A-Level maths knowledge of logarithms and then reading through ruby documentation for the relevant Math function of log2. I then added the .ceil to round up as required.

In regards to my maths, I found:
(10,000 * distance) root 2 = folds
10,000 * distance = 2 ^ folds
log2(10,000d) = folds